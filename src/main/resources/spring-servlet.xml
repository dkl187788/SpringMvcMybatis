<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    					   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        				   http://www.springframework.org/schema/context
        				   http://www.springframework.org/schema/context/spring-context-3.0.xsd
        				   http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
    <!-- 启用spring mvc 注解 -->

    <!--
    Spring为我们提供了一种极为方便注册这些BeanPostProcessor的方式，
                 即使用<context:annotation- config/>隐式地向 Spring容器注册
     AutowiredAnnotationBeanPostProcessor、
     RequiredAnnotationBeanPostProcessor、
     CommonAnnotationBeanPostProcessor以及
     PersistenceAnnotationBeanPostProcessor
                  这4个BeanPostProcessor
    -->
    <context:annotation-config />
    <!-- 对所有非@Service类进行扫描，完成Bean的创建和自动依赖注入 -->
    <!-- 扫描业务组件,让spring不扫描带有@Service注解的类(留在root-context.xml中扫描@Service注解的类),防止事务失效 -->
    <context:component-scan base-package="com.dukl.web">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Service" />
    </context:component-scan>

    <!--
      <mvc:annotation-driven /> 是一种简写形式,
           会自动注册DefaultAnnotationHandlerMapping与
      AnnotationMethodHandlerAdapter 两个bean,
           是spring MVC为@Controllers分发请求所必须的
    -->

    <!-- 由于返回下载json文件，和下面冲突
     <mvc:annotation-driven/>
     -->

    <!-- 避免IE执行AJAX时候，返回Json下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>apolication/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <!--
     这点是必需的还是非必需的呢？
      如果定义了 DefaultAnnotationHandlerMapping，它就可以将请求来的 url 和被注解了 @RequesMapping 的指进行匹配。
      当然，说这句话的前提是定义 DefaultAnnotationHandlerMapping 的优先级
      比定义了其它的 HandlerMapping 的优先级要高(如果定义了其它的话)。
      如果没有定义 DefaultAnnotationHandlerMapping，并不代表不能映射到相应的 handler 上。
      因为如果你定义了其它的 HandlerMapping，请求过来的 url 和注解了的 @RequestMapping 里的值正好能匹配上，
      那么没有 DefaultAnnotationHandlerMapping，@Controller 一样可以如鱼得水的被捕获到。
      当然，如果你要使用基于注解的 @Controller，最好还是老老实实地注册 DefaultAnnotationHandlerMapping。
   -->

    <!--
          和上面的 HandlerMapping 一样，是必需的还是非必需的呢？
       Spring MVC 中，如果我们没有注册任何 HandlerAdaptor 到容器中，注意，我说的是任何。
          那么 DispatcherServlet 将启用后备的几个默认使用的 HandlerAdaptor 实现，包括：
       org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter
       org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter
       org.springframework.web.servlet.mvc.AnnotationMethodHandlerAdaptor
        看见没，如果我们没有注册任何的 HandlerAdaptor，框架会准备 AnnotationMethodHandlerAdaptor 的。
         可是由于某些原因，我们需要为某些 HandlerAdaptoer 进行一些定制化，即在容器中注册了某个 HandlerAdaptor，
         那么很抱歉，框架只会启用你注册的那个，而框架本身准备的不会被启用。所以，你一旦为某个 HandlerMapping 进行了定制化，
        请别忘了把其它的 HandlerAdaptor 也注册进来，即便这些不需要定制化。
        否则的话，后果你是可以想象的。当然，除非你确保你真的只需要那一个你注册进容器的 HandlerAdaptor，否则，
        我再啰嗦一遍，别忘了把其它的 HandlerAdaptor 也注册进来。
   -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="cacheSeconds" value="0" />

        <!-- 配置一下对json数据的转换 -->
        <property name="messageConverters">
            <list>
                <!-- json转换器 -->
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>

    <bean
            class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json" />
            </map>
        </property>
        <!--<property name="defaultViews">
            <list>
                <bean class="com.ailk.base.DefaultMappingJacksonJsonView" />
            </list>
        </property>  -->
        <property name="ignoreAcceptHeader" value="true" />
    </bean>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <!-- InternalResourceViewResolver默认的就是JstlView，可以不配置viewClass -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/jsp/" />
        <property name="suffix" value=".jsp"></property>
    </bean>
    <!-- 异常处理 -->

    <!-- 文件上传拦截，最大上传值及最小上传值 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10737418240" />
        <property name="defaultEncoding" value="utf-8" />
        <property name="maxInMemorySize" value="40960" />
    </bean>

    <!-- 将静态文件指定到某个特殊的文件夹中统一处理
    <mvc:resources location="/resources/" mapping="/resources/**"/>
     -->
</beans>